/*
   Copyright 2006 Eros Project

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

*/


/**
 * Title:        Eros Logging Service<p>
 * Description:  Project to provide distributed system logging.<p>
 * Copyright:    Copyright (c) C. Lunn<p>
 * Company:      Countrywide Assured<p>
 * @author C. Lunn
 * @version 1.0
 */
package org.jini.projects.eros.ui;

import java.rmi.Remote;
import java.rmi.RemoteException;
import java.util.Date;

import org.jini.projects.eros.ErosServiceStats;
import org.jini.projects.eros.ui.erroranalyser.model.ErrorModel;

/**
 * The user interface definitions for the Eros Service.
 */
public interface ErosServiceUI extends Remote {

    /**
     * Provides statistical information about the service status
     * and the number of logs that have been processed.
     * @throws RemoteException Errors generated by creating the statistics
     * @return The statistics for the service.
     */        
    ErosServiceStats getStats() throws RemoteException;
    
    /**
     * Provides the current length of the queue of logs that are
     * waiting to be processed.
     * @throws RemoteException Any errors obtaining the length
     * @return The number of log items waiting to be processed
     */        
    long getCurrentQueueSize() throws RemoteException;

    /**
     * Provides the current length of the queue of logs that are
     * in error at the server.
     * @throws RemoteException Any errors obtaining the length
     * @return The number of log items in error.
     */            
    long getErrorQueueSize() throws RemoteException;
    
    /**
     * Provides the number of log details that have been received
     * by the service.
     * @throws RemoteException Any errors obtaining the count
     * @return The number of logs accepted by the service
     */        
    long getRecievedCount() throws RemoteException;

    /**
     * 
     */
    ErrorModel  getErrorRecords(Date from, Date to) throws RemoteException;
    
}
