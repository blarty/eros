/*
   Copyright 2006 Eros Project

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

*/


/**
 * Title:        Eros Logging Service<p>
 * Description:  Project to provide distributed system logging.<p>
 * Copyright:    Copyright (c) C. Lunn<p>
 * Company:      Countrywide Assured<p>
 * @author C. Lunn
 * @version 1.0
 */
package org.jini.projects.eros;

import java.rmi.RemoteException;
import java.util.logging.Level;

/**
 * The interface that provides logging methods for a client
 * that should guarantee they will be forwarded to a server.
 * <p>
 * This is the interface that clients must interact with to provide reliable
 * logging to an Eros service.
 */
public interface ErosLogger {

    /**
     * The name that will be used for the default logger generated by
     * Eros.  This should be used when locating the logger from the Logger
     * using <code>Logger.getLogger(ErosLogger.EROS_LOGGER_NAME)</code>.
     */
    static final String EROS_LOGGER_NAME = "uk.co.cwa";

    /**
     * Initialise the logger and ensure that logging can be performed.
     * <p>
     * This method should be called initially by the client.
     * @param name The name of the applciation that will be using this logger.
     *          This will be used to identify the applications that have logged
     *          errors.
     * @throws RemoteException Any problems contacting the server.
     */
    void initialise(String name) throws RemoteException;

    /**
     * Sets the level above which logs will be sent to Eros, by default this is Level.WARNING
     * @param publishLevel the lowest logging level that will be sent to the Eros service
     */
    void setPublishingLevel(Level publishLevel);
    
    /**
     * Terminates all processes within the logger.
     */
    void terminate();

    /**
     * Logs a message with the server.
     * @param message A message that should be associated with the log.
     * @param level The level of log required.
     */
    void log(String message, LogLevel level);

    /**
     * Logs a message with the server.
     * @param message A message that should be associated with the log.
     * @param level The level of log required.
     * @param exception The exception whose details should be logged.
     */
    void log(String message, LogLevel level, Throwable exception);

    /**
     * Logs a message with the server.
     * @param message A message that should be associated with the log.
     * @param level The level of log required.
     * @param exception The exception whose details should be logged.
     * @param args Any data that is relevant to the log.
     */
    void log(String message, LogLevel level, Throwable exception, Object[] args);

    /**
     * Logs a message with the server.
     * @param message A message that should be associated with the log.
     * @param level The level of log required.
     * @param exception The exception whose details should be logged.
     * @param args Any data that is relevant to the log.
     * @param code A code that is associated with this particular type of log.
     */
    void log(String message, LogLevel level, Throwable exception, Object[] args, int code);

    /**
     * Provides access to a <code>java.util.logging.Handler</code> that was
     * introduced as part of <b>JDK1.4.0</b>.
     * @return IF the current JVM is greater than version 1.4.0 then
     * the object returned will be an instance of a
     * <code>java.util.logging.Handler</code> and also implements the Eros
     * interface <code>org.jini.projects.eros.logging.ErosHandler</code>.
     * If the JVM version is before version 1.4.0 then <code>null</code>
     * will be returned.
     */
    Object getLoggingHandler() throws Exception;

    /**
     * Implemented to facilitate SOAP logging.
     * @param message
     */
    void logWarning(String message);      //TODO: Move into separate interface.
}
